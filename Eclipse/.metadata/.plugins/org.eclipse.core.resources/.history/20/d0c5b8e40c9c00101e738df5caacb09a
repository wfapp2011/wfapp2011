package de.uni_potsdam.hpi.wfapp2011.activiti;

import java.sql.ResultSet;
import java.sql.SQLException;

import org.activiti.engine.ProcessEngine;
import org.activiti.engine.ProcessEngines;

import de.uni_potsdam.hpi.wfapp2011.Logging.DbInterface;
import de.uni_potsdam.hpi.wfapp2011.constants.Constants;

public class ActivitiConnection implements ProcessStatusInterface {
	private ProcessEngine processEngine;
	DbInterface dbInterface;
	String executionId;
	String type;
	String semester;
	int year;
	
	
	public ActivitiConnection(String type, String semester, int year){
		processEngine = ProcessEngines.getDefaultProcessEngine();
		dbInterface = new DbInterface();
		this.type  = type;
		this.semester = semester;
		this.year = year;
		executionId = getExecutionId();
	}
	
	public boolean isProjectProposalPhase(){
		return (readVariable(executionId).equals(Constants.PROPOSALCOL));
	}
	
	public boolean isFinalTopicDecisionPhase(){
		return (readVariable(executionId).equals(Constants.TOPICDECISION));
	}
	
	public boolean isVotingPhase(){
		return (readVariable(executionId).equals(Constants.VOTING));
	}
	
	public boolean isProjectMatchingPhase(){
		return (readVariable(executionId).equals(Constants.PROJECTMATCHING));
	}
	
	public String getCurrentPhase(){
		return readVariable(executionId);
	}
	
	
	private String readVariable(String executionId) {
		ProcessEngine processEngine = ProcessEngines.getProcessEngine("default");
		String phase = (String) processEngine.getRuntimeService().getVariable(executionId, Constants.PROCESS_PHASE);
		processEngine.close();
		return phase;

	}
	
	/**
	 * This Methods gets the executionId for the activiti instance of the process. 
	 * @return the executionId, null if it can't get the execution id.
	 */
	
	public String getExecutionId(){
		// Has to replaced, if the table is known, where to save it. 
		String query = "SELECT property FROM table1 WHERE name = 'executionId'";
		try {
			dbInterface.connect(type, semester, year);
			ResultSet resultSet = dbInterface.executeQueryDirectly(query);
			while(resultSet.next()){
				executionId = resultSet.getString(1);
			}	
			dbInterface.disconnect();
		} catch (SQLException e) {
			System.out.println("Error getting the ExecutionId "+ e.getMessage());
			e.printStackTrace();
		}
		return executionId;
	}
	
	public static void main(String[] args){
		ActivitiConnection activiti = new ActivitiConnection("Ba", "SS", 2011);
		String executionId = "4910";
		System.out.println("ProjectProposalPhase: "+activiti.isProjectProposalPhase());
		System.out.println("FinalTopicDecsionPhase: "+activiti.isFinalTopicDecisionPhase());
		System.out.println("VotingPhase: "+ activiti.isVotingPhase());
		System.out.println("ProjectMatchingPhase: "+ activiti.isProjectMatchingPhase());
		System.out.println(activiti.readVariable(executionId, "phase"));
	}
}
